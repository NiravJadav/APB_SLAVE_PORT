
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//--> Interrupt FLAG Logic
wire [NB_RANK-1:0]rank_intr_or;
wire mc_err_intr_or;
wire mc_intr_or;

    assign mc_intr_o = ( |rank_intr_or ) ;  // Interrupt pin logic 

genvar j;

generate
for(j=0; j<NB_RANK; j++)
 begin
    assign rank_intr_or[j] = (rank_intr_en[j]  & ( mrw_done_status_i[j] | mrr_done_status_i[j] | ppr_done_status_i[j]) ) ;
 end
endgenerate 
	/*		   (rank_intr_en[1]  &  ( mrw_done_status_i[1] | mrr_done_status_i[1] | ppr_done_status_i[1]) ) | 
			   (rank_intr_en[2]  &  ( mrw_done_status_i[2] | mrr_done_status_i[2] | ppr_done_status_i[2]) ) | 
			   (rank_intr_en[3]  &  ( mrw_done_status_i[3] | mrr_done_status_i[3] | ppr_done_status_i[3]) ) | 
			   (rank_intr_en[4]  &  ( mrw_done_status_i[4] | mrr_done_status_i[4] | ppr_done_status_i[4]) ) | 
			   (rank_intr_en[5]  &  ( mrw_done_status_i[5] | mrr_done_status_i[5] | ppr_done_status_i[5]) ) | 
			   (rank_intr_en[6]  &  ( mrw_done_status_i[6] | mrr_done_status_i[6] | ppr_done_status_i[6]) ) | 
			   (rank_intr_en[7]  &  ( mrw_done_status_i[7] | mrr_done_status_i[7] | ppr_done_status_i[7]) )    ) ;*/

  

    assign mc_err_intr_or = (	( init_resp_error_en	    & init_resp_error_i 	) |
			    	( ca_resp_error_en	    & ca_resp_error_i 		) |
			    	( read_gate_resp_error_en   & read_gate_resp_error_i 	) |
			    	( read_level_resp_error_en  & read_level_resp_error_i 	) |
			    	( write_level_resp_error_en & write_level_resp_error_i 	) |
			    	( write_dq_resp_error_en    & write_dq_resp_error_i	) |
			    	( mc_error_en		    & mc_error_i		) 	);	
    
   assign mc_intr_or = ( 	( intr_1_en      & freq_change_error_i	)|
				( intr_2_en      & freq_change_done_i	)|               
				( intr_3_en      & freq_change_ready_i	)|              
				( intr_4_en      & watch_dog_timeout_i	)|              
				( intr_5_en      & refresh_x_trm_i	)	);       
				


///////////////////////////////////////////////////////////////////////////////////////////////

	always@(posedge pclk_i or negedge prst_ni)
	begin
		if(!prst_ni)
		begin
		// Rank Specific Reset Value 
			mr_addr 			<= 0	; // addr = 00h
			mr_data				<= 0	; // addr = 01h
			rank_mrw 			<= 0	; // addr = 02h
			rank_mrr 			<= 0	;
			rank_busy			<= 0	;
			mrw_done_status 		<= 0	;
			mrr_done_status 		<= 0	;
			ppr_done_status			<= 0	;
			rank_index 			<= 0	; // addr = 03h
			all_rank_mr			<= 0 	;

			ppr_enable			<= 0	; // addr = 04h
			ppr_status			<= 0	;

			rank_intr			<= 0	; // addr = 60h

			init_resp_error			<= 0    ; // addr = 61h
			ca_resp_error			<= 0	;
                        read_gate_resp_error		<= 0    ;
                        read_level_resp_error		<= 0    ;
                        write_level_resp_error 		<= 0    ;
	                write_dq_resp_error		<= 0    ;
			mc_error			<= 0    ;
			

			rank_intr_en			<= 'hff	; // addr = 64h
						
			init_resp_error_en		<= 1    ; // addr = 65h 		
			ca_resp_error_en		<= 1	;		
	                read_gate_resp_error_en		<= 1    ;
	                read_level_resp_error_en	<= 1    ; 	
	                write_level_resp_error_en	<= 1    ; 
	                write_dq_resp_error_en		<= 1    ;
	                mc_error_en			<= 1    ; 
			
			intr_0_en			<= 1    ; // addr = 66h	
			intr_1_en               	<= 1	; 
			intr_2_en               	<= 1    ;
			intr_3_en               	<= 1    ; 
			intr_4_en               	<= 1    ; 
			intr_5_en			<= 1    ;
		end
		else 
		begin
			if(add_00h & w_en)		    mr_addr[rank_index]  <=  wdata_c[7 : 0]		    ;
			if(add_01h & w_en)		    mr_data[rank_index] <=  wdata_c[15: 8]		    ;
			if(add_02h & w_en & wdata_c[16])    rank_mrw[rank_index] <=1; else rank_mrw [rank_index]<=0 ;
			if(add_02h & w_en & wdata_c[17])    rank_mrr[rank_index] <=1; else rank_mrr [rank_index]<=0 ;
 	
			rank_busy	 <= rank_busy_c; 
			mrw_done_status  <= mrw_done_c;
			mrr_done_status  <= mrr_done_c;		
			ppr_done_status  <= ppr_done_c;
 
			if(add_03h & w_en) {all_rank_mr , rank_index} <= {wdata_c[31],wdata_c[26:24]};
			
			if(add_04h & w_en & wdata_c[0])	    ppr_enable[rank_index] <= 1; 	      else ppr_enable[rank_index] <=0; 	
			ppr_status	<= ppr_status_c;	
			
			rank_intr	<= rank_intr_c				; // addr = 60h 	

			init_resp_error		<=   init_resp_error_c		; // addr = 61h
                        ca_resp_error		<=   ca_resp_error_c		;
                        read_gate_resp_error	<=   read_gate_resp_error_c	;
                        read_level_resp_error	<=   read_level_resp_error_c	;
                        write_level_resp_error  <=   write_level_resp_error_c	;
                        write_dq_resp_error	<=   write_dq_resp_error_c	;
	                mc_error		<=   mc_error_c			;
		
			test_mode_intr		<=   test_mode_intr_c		; // addr = 62h				
			freq_change_error	<=   freq_change_error_c		;
                        freq_change_done	<=   freq_change_done_c		;
                        freq_change_ready 	<=   freq_change_ready_c 	;
                        watch_dog_timeout	<=   watch_dog_timeout_c	;
                        refresh_x_trm		<=   refresh_x_trm_c		;
		
			if(add_64h & w_en) 		    rank_intr_en <= wdata_c[7:0]; // addr = 64h
			
			if(add_65h & w_en) { mc_error_en,write_dq_resp_error_en,  write_level_resp_error_en, read_gate_resp_error_en, read_level_resp_error_en, ca_resp_error_en,init_resp_error_en} <= wdata_c[15:8];	//addr = 65h
			if(add_66h & w_en) {intr_5_en , intr_4_en, intr_3_en, intr_2_en, intr_1_en, intr_0_en} <= wdata_c[21:16];

		end	
	end
	

assign reg_data[7 : 0] =(add_00h ) ? mr_addr[rank_index] :
			(add_04h ) ? {6'b0,ppr_status[rank_index],1'b0} :
			(add_60h ) ? {rank_intr}:
			(add_64h ) ? {rank_intr_en} : 8'b0;


assign reg_data[15: 8] =(add_01h ) ? mr_data [rank_index] :
			(add_61h ) ? {1'b0, mc_error, write_dq_resp_error, write_level_resp_error, read_level_resp_error, read_gate_resp_error, ca_resp_error, init_resp_error} :
			(add_65h ) ? {1'b0, mc_error_en,write_dq_resp_error_en,  write_level_resp_error_en, read_gate_resp_error_en, read_level_resp_error_en, ca_resp_error_en,init_resp_error_en} 	 : 8'b0;

assign reg_data[23:16] =(add_02h ) ? {ppr_done_status[rank_index], mrr_done_status[rank_index], mrw_done_status[rank_index], 1'b0, 1'b0 , rank_busy_c[rank_index], 2'b0} :
			(add_62h ) ? {2'b0,refresh_x_trm, watch_dog_timeout, freq_change_ready, freq_change_done, freq_change_error, test_mode_intr} :
			(add_66h ) ? {2'b0, intr_5_en , intr_4_en, intr_3_en, intr_2_en, intr_1_en, intr_0_en} : 8'b0;

assign reg_data[31:24] =(add_03h ) ? {all_rank_mr, 4'b0, rank_index} : 8'b0;	

	always@(posedge pclk_i or negedge prst_ni)
	begin
		if(!prst_ni)
			prdata_o <= 0;
		else  
			prdata_o <= prdata_c;
	end		
	



endmodule
